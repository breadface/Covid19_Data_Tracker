services:
  # HDFS NameNode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - "9870:9870"
      - "9000:9000"
    environment:
      - CLUSTER_NAME=covid19-cluster
    env_file:
      - ./hadoop.env
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HDFS DataNode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    depends_on:
      - namenode
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9864"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hive Metastore
  hive-metastore:
    build: ./hive
    container_name: hive-metastore
    restart: always
    depends_on:
      - postgres
    ports:
      - "9083:9083"
    volumes:
      - hive_metastore:/opt/hive/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9083"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hive Metastore Database
  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_DB=metastore
      - POSTGRES_USER=hive
      - POSTGRES_PASSWORD=hive
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hive -d metastore"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HiveServer2
  hive-server:
    build:
      context: ./hive
      dockerfile: Dockerfile.hiveserver2
    container_name: hive-server
    restart: always
    depends_on:
      - namenode
      - datanode
      - hive-metastore
    ports:
      - "10000:10000"
      - "10002:10002"
    volumes:
      - hive_server:/opt/hive/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10002"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    restart: always
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - spark_master_data:/opt/bitnami/spark
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    restart: always
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    volumes:
      - spark_worker_data:/opt/bitnami/spark

  # Spark Job Service
  spark-job:
    build: ./spark-jobs
    container_name: spark-job
    restart: "no"
    depends_on:
      - spark-master
      - spark-worker
      - hive-metastore
      - hive-server
      - namenode
      - datanode
    volumes:
      - spark_job_data:/opt/spark/jobs
    command: >
      bash -c "
        echo 'Spark job service ready. Run manually with: docker exec spark-job /opt/spark/run-covid-job.sh' &&
        tail -f /dev/null
      "

  # Spring Boot Application
  covid19-tracker:
    build: .
    container_name: covid19-tracker
    restart: always
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - HDFS_NAMENODE=hdfs://namenode:9000
      - HIVE_JDBC_URL=jdbc:hive2://hive-server:10000/default
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - namenode
      - datanode
      - hive-server
      - spark-master
    volumes:
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  covid19-frontend:
    build: ./covid19-visualization
    container_name: covid19-frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
    depends_on:
      - covid19-tracker

volumes:
  hadoop_namenode:
  hadoop_datanode:
  hive_metastore:
  postgres_data:
  hive_server:
  spark_master_data:
  spark_worker_data:
  spark_job_data:

networks:
  default:
    name: covid19-network 